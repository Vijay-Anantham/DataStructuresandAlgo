from ast import List
from functools import lru_cache

def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        
        @lru_cache(None)
        def dp(i, hold):   # 1 - holding 0 - not holding 2 - under cooldown
                        
            if i == n:
                return 0
            
            do_nothing = dp(i+1, hold) # Skip to next element without changing the current state
            do = 0 # For the 'do' in current state it depends on the previous states
            
            if hold == 1: 
                # if holding and in the current state you wish to sell the stock 
                # --> sell and move to next state in cooldown
                do = prices[i] + dp(i+1, 2)
                
            elif hold == 2: 
                # If under cooldown go to next state without doing nothing and changing the state to not holding
                do = dp(i+1, 0)
                
            else:
                # If not holding and not cooldown we are free to buy any stocks so,..
                # buy a stock and change out state to holding
                do = -prices[i] + dp(i+1,1)
                
            return max(do_nothing, do)

        return dp(0, 0)